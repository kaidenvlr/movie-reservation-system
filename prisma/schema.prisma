generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum ReservationStatus {
  PENDING
  AWAITING_PAYMENT
  PAID
  CANCELLED
  EXPIRED
  REFUNDED
}

enum HallFormat {
  TWOD
  THREED
  IMAX
}

enum AudioLang {
  ORIGINAL
  RU
  KZ
  EN
}

enum Subtitles {
  NONE
  RU
  KZ
  EN
}

model City {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  timezone  String   @default("Asia/Almaty")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cinema    Cinema[]
}

model Cinema {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  description String?
  address     String?
  cityId      String        @db.Uuid
  city        City          @relation(fields: [cityId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CinemaHall  CinemaHall[]
  CinemaMovie MovieCinema[]

  @@index([cityId])
}

model CinemaHall {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  format    HallFormat @default(TWOD)
  cinemaId  String     @db.Uuid
  cinema    Cinema     @relation(fields: [cinemaId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  Seat               Seat[]
  MovieCinemaSession MovieCinemaSession[]

  @@index([cinemaId])
}

model Seat {
  id              String            @id @default(uuid()) @db.Uuid
  hallId          String            @db.Uuid
  hall            CinemaHall        @relation(fields: [hallId], references: [id])
  rowLabel        String
  seatNumber      Int
  seatType        String?
  isActive        Boolean           @default(true)
  ReservationItem ReservationItem[]

  @@unique([hallId, rowLabel, seatNumber])
  @@index([hallId])
}

model Movie {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  description String?
  durationMin Int?
  rating      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CinemaMovie MovieCinema[]
}

model MovieCinema {
  id String @id @default(uuid()) @db.Uuid

  cinemaId String @db.Uuid
  cinema   Cinema @relation(fields: [cinemaId], references: [id])

  movieId String @db.Uuid
  movie   Movie  @relation(fields: [movieId], references: [id])

  basePrice Decimal @db.Decimal(10, 2)
  currency  String  @default("KZT")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MovieCinemaSession MovieCinemaSession[]

  @@unique([cinemaId, movieId])
  @@index([cinemaId])
  @@index([movieId])
}

model MovieCinemaSession {
  id            String      @id @default(uuid()) @db.Uuid
  movieCinemaId String      @db.Uuid
  movieCinema   MovieCinema @relation(fields: [movieCinemaId], references: [id])

  cinemaHallId String     @db.Uuid
  cinemaHall   CinemaHall @relation(fields: [cinemaHallId], references: [id])

  startsAt  DateTime
  audio     AudioLang  @default(RU)
  subtitles Subtitles  @default(NONE)
  format    HallFormat
  price     Decimal?   @db.Decimal(10, 2)
  currency  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ReservationItem ReservationItem[]

  @@unique([movieCinemaId, cinemaHallId, startsAt])
  @@index([cinemaHallId, startsAt])
  @@index([movieCinemaId, startsAt])
}

model Reservation {
  id     String  @id @default(uuid()) @db.Uuid
  userId String? @db.Uuid
  user   User?   @relation(fields: [userId], references: [id])

  status    ReservationStatus @default(PENDING)
  expiresAt DateTime?
  paidAt    DateTime?
  total     Decimal           @db.Decimal(10, 2)
  currency  String            @default("KZT")

  paymentId String?
  meta      Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items ReservationItem[]

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
}

model ReservationItem {
  id String @id @default(uuid()) @db.Uuid

  reservationId String      @db.Uuid
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  sessionId String             @db.Uuid
  session   MovieCinemaSession @relation(fields: [sessionId], references: [id])

  seatId String @db.Uuid
  seat   Seat   @relation(fields: [seatId], references: [id])

  price    Decimal @db.Decimal(10, 2)
  currency String  @default("KZT")

  @@unique([sessionId, seatId])
  @@index([reservationId])
  @@index([sessionId])
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique
  passwordHash String
  role         UserRole @default(USER)
  phone        String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  reservations Reservation[]
}
